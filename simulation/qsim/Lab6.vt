// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/19/2021 22:51:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab6block
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab6block_vlg_sample_tst(
	A,
	B,
	Clock,
	Enable,
	resetA,
	resetB,
	w,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  Enable;
input  resetA;
input  resetB;
input  w;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or Enable or resetA or resetB or w)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab6block_vlg_check_tst (
	Decoder,
	R1,
	R2,
	states,
	student_id,
	t,
	u,
	x,
	y,
	z,
	sampler_rx
);
input [15:0] Decoder;
input [3:0] R1;
input [3:0] R2;
input [3:0] states;
input [3:0] student_id;
input [7:0] t;
input [7:0] u;
input [0:6] x;
input [0:6] y;
input [0:6] z;
input sampler_rx;

reg [15:0] Decoder_expected;
reg [3:0] R1_expected;
reg [3:0] R2_expected;
reg [3:0] states_expected;
reg [3:0] student_id_expected;
reg [7:0] t_expected;
reg [7:0] u_expected;
reg [0:6] x_expected;
reg [0:6] y_expected;
reg [0:6] z_expected;

reg [15:0] Decoder_prev;
reg [3:0] R1_prev;
reg [3:0] R2_prev;
reg [3:0] states_prev;
reg [3:0] student_id_prev;
reg [7:0] t_prev;
reg [7:0] u_prev;
reg [0:6] x_prev;
reg [0:6] y_prev;
reg [0:6] z_prev;

reg [15:0] Decoder_expected_prev;
reg [3:0] R1_expected_prev;
reg [3:0] R2_expected_prev;
reg [3:0] states_expected_prev;
reg [3:0] student_id_expected_prev;
reg [0:6] x_expected_prev;
reg [0:6] y_expected_prev;
reg [0:6] z_expected_prev;

reg [15:0] last_Decoder_exp;
reg [3:0] last_R1_exp;
reg [3:0] last_R2_exp;
reg [3:0] last_states_exp;
reg [3:0] last_student_id_exp;
reg [0:6] last_x_exp;
reg [0:6] last_y_exp;
reg [0:6] last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	Decoder_prev = Decoder;
	R1_prev = R1;
	R2_prev = R2;
	states_prev = states;
	student_id_prev = student_id;
	t_prev = t;
	u_prev = u;
	x_prev = x;
	y_prev = y;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	Decoder_expected_prev = Decoder_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	states_expected_prev = states_expected;
	student_id_expected_prev = student_id_expected;
	x_expected_prev = x_expected;
	y_expected_prev = y_expected;
	z_expected_prev = z_expected;
end


// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected states[ 3 ]
initial
begin
	states_expected[3] = 1'bX;
end 
// expected states[ 2 ]
initial
begin
	states_expected[2] = 1'bX;
end 
// expected states[ 1 ]
initial
begin
	states_expected[1] = 1'bX;
end 
// expected states[ 0 ]
initial
begin
	states_expected[0] = 1'bX;
end 
// expected x[ 6 ]
initial
begin
	x_expected[6] = 1'bX;
end 
// expected x[ 5 ]
initial
begin
	x_expected[5] = 1'bX;
end 
// expected x[ 4 ]
initial
begin
	x_expected[4] = 1'bX;
end 
// expected x[ 3 ]
initial
begin
	x_expected[3] = 1'bX;
end 
// expected x[ 2 ]
initial
begin
	x_expected[2] = 1'bX;
end 
// expected x[ 1 ]
initial
begin
	x_expected[1] = 1'bX;
end 
// expected x[ 0 ]
initial
begin
	x_expected[0] = 1'bX;
end 
// expected y[ 6 ]
initial
begin
	y_expected[6] = 1'bX;
end 
// expected y[ 5 ]
initial
begin
	y_expected[5] = 1'bX;
end 
// expected y[ 4 ]
initial
begin
	y_expected[4] = 1'bX;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 
// expected z[ 6 ]
initial
begin
	z_expected[6] = 1'bX;
end 
// expected z[ 5 ]
initial
begin
	z_expected[5] = 1'bX;
end 
// expected z[ 4 ]
initial
begin
	z_expected[4] = 1'bX;
end 
// expected z[ 3 ]
initial
begin
	z_expected[3] = 1'bX;
end 
// expected z[ 2 ]
initial
begin
	z_expected[2] = 1'bX;
end 
// expected z[ 1 ]
initial
begin
	z_expected[1] = 1'bX;
end 
// expected z[ 0 ]
initial
begin
	z_expected[0] = 1'bX;
end 
// expected student_id[ 3 ]
initial
begin
	student_id_expected[3] = 1'bX;
end 
// expected student_id[ 2 ]
initial
begin
	student_id_expected[2] = 1'bX;
end 
// expected student_id[ 1 ]
initial
begin
	student_id_expected[1] = 1'bX;
end 
// expected student_id[ 0 ]
initial
begin
	student_id_expected[0] = 1'bX;
end 
// expected Decoder[ 15 ]
initial
begin
	Decoder_expected[15] = 1'bX;
end 
// expected Decoder[ 14 ]
initial
begin
	Decoder_expected[14] = 1'bX;
end 
// expected Decoder[ 13 ]
initial
begin
	Decoder_expected[13] = 1'bX;
end 
// expected Decoder[ 12 ]
initial
begin
	Decoder_expected[12] = 1'bX;
end 
// expected Decoder[ 11 ]
initial
begin
	Decoder_expected[11] = 1'bX;
end 
// expected Decoder[ 10 ]
initial
begin
	Decoder_expected[10] = 1'bX;
end 
// expected Decoder[ 9 ]
initial
begin
	Decoder_expected[9] = 1'bX;
end 
// expected Decoder[ 8 ]
initial
begin
	Decoder_expected[8] = 1'bX;
end 
// expected Decoder[ 7 ]
initial
begin
	Decoder_expected[7] = 1'bX;
end 
// expected Decoder[ 6 ]
initial
begin
	Decoder_expected[6] = 1'bX;
end 
// expected Decoder[ 5 ]
initial
begin
	Decoder_expected[5] = 1'bX;
end 
// expected Decoder[ 4 ]
initial
begin
	Decoder_expected[4] = 1'bX;
end 
// expected Decoder[ 3 ]
initial
begin
	Decoder_expected[3] = 1'bX;
end 
// expected Decoder[ 2 ]
initial
begin
	Decoder_expected[2] = 1'bX;
end 
// expected Decoder[ 1 ]
initial
begin
	Decoder_expected[1] = 1'bX;
end 
// expected Decoder[ 0 ]
initial
begin
	Decoder_expected[0] = 1'bX;
end 
// generate trigger
always @(Decoder_expected or Decoder or R1_expected or R1 or R2_expected or R2 or states_expected or states or student_id_expected or student_id or t_expected or t or u_expected or u or x_expected or x or y_expected or y or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Decoder = %b | expected R1 = %b | expected R2 = %b | expected states = %b | expected student_id = %b | expected t = %b | expected u = %b | expected x = %b | expected y = %b | expected z = %b | ",Decoder_expected_prev,R1_expected_prev,R2_expected_prev,states_expected_prev,student_id_expected_prev,t_expected_prev,u_expected_prev,x_expected_prev,y_expected_prev,z_expected_prev);
	$display("| real Decoder = %b | real R1 = %b | real R2 = %b | real states = %b | real student_id = %b | real t = %b | real u = %b | real x = %b | real y = %b | real z = %b | ",Decoder_prev,R1_prev,R2_prev,states_prev,student_id_prev,t_prev,u_prev,x_prev,y_prev,z_prev);
`endif
	if (
		( Decoder_expected_prev[0] !== 1'bx ) && ( Decoder_prev[0] !== Decoder_expected_prev[0] )
		&& ((Decoder_expected_prev[0] !== last_Decoder_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[0] = Decoder_expected_prev[0];
	end
	if (
		( Decoder_expected_prev[1] !== 1'bx ) && ( Decoder_prev[1] !== Decoder_expected_prev[1] )
		&& ((Decoder_expected_prev[1] !== last_Decoder_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[1] = Decoder_expected_prev[1];
	end
	if (
		( Decoder_expected_prev[2] !== 1'bx ) && ( Decoder_prev[2] !== Decoder_expected_prev[2] )
		&& ((Decoder_expected_prev[2] !== last_Decoder_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[2] = Decoder_expected_prev[2];
	end
	if (
		( Decoder_expected_prev[3] !== 1'bx ) && ( Decoder_prev[3] !== Decoder_expected_prev[3] )
		&& ((Decoder_expected_prev[3] !== last_Decoder_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[3] = Decoder_expected_prev[3];
	end
	if (
		( Decoder_expected_prev[4] !== 1'bx ) && ( Decoder_prev[4] !== Decoder_expected_prev[4] )
		&& ((Decoder_expected_prev[4] !== last_Decoder_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[4] = Decoder_expected_prev[4];
	end
	if (
		( Decoder_expected_prev[5] !== 1'bx ) && ( Decoder_prev[5] !== Decoder_expected_prev[5] )
		&& ((Decoder_expected_prev[5] !== last_Decoder_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[5] = Decoder_expected_prev[5];
	end
	if (
		( Decoder_expected_prev[6] !== 1'bx ) && ( Decoder_prev[6] !== Decoder_expected_prev[6] )
		&& ((Decoder_expected_prev[6] !== last_Decoder_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[6] = Decoder_expected_prev[6];
	end
	if (
		( Decoder_expected_prev[7] !== 1'bx ) && ( Decoder_prev[7] !== Decoder_expected_prev[7] )
		&& ((Decoder_expected_prev[7] !== last_Decoder_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[7] = Decoder_expected_prev[7];
	end
	if (
		( Decoder_expected_prev[8] !== 1'bx ) && ( Decoder_prev[8] !== Decoder_expected_prev[8] )
		&& ((Decoder_expected_prev[8] !== last_Decoder_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[8] = Decoder_expected_prev[8];
	end
	if (
		( Decoder_expected_prev[9] !== 1'bx ) && ( Decoder_prev[9] !== Decoder_expected_prev[9] )
		&& ((Decoder_expected_prev[9] !== last_Decoder_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[9] = Decoder_expected_prev[9];
	end
	if (
		( Decoder_expected_prev[10] !== 1'bx ) && ( Decoder_prev[10] !== Decoder_expected_prev[10] )
		&& ((Decoder_expected_prev[10] !== last_Decoder_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[10] = Decoder_expected_prev[10];
	end
	if (
		( Decoder_expected_prev[11] !== 1'bx ) && ( Decoder_prev[11] !== Decoder_expected_prev[11] )
		&& ((Decoder_expected_prev[11] !== last_Decoder_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[11] = Decoder_expected_prev[11];
	end
	if (
		( Decoder_expected_prev[12] !== 1'bx ) && ( Decoder_prev[12] !== Decoder_expected_prev[12] )
		&& ((Decoder_expected_prev[12] !== last_Decoder_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[12] = Decoder_expected_prev[12];
	end
	if (
		( Decoder_expected_prev[13] !== 1'bx ) && ( Decoder_prev[13] !== Decoder_expected_prev[13] )
		&& ((Decoder_expected_prev[13] !== last_Decoder_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[13] = Decoder_expected_prev[13];
	end
	if (
		( Decoder_expected_prev[14] !== 1'bx ) && ( Decoder_prev[14] !== Decoder_expected_prev[14] )
		&& ((Decoder_expected_prev[14] !== last_Decoder_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[14] = Decoder_expected_prev[14];
	end
	if (
		( Decoder_expected_prev[15] !== 1'bx ) && ( Decoder_prev[15] !== Decoder_expected_prev[15] )
		&& ((Decoder_expected_prev[15] !== last_Decoder_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decoder[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decoder_expected_prev);
		$display ("     Real value = %b", Decoder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decoder_exp[15] = Decoder_expected_prev[15];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( states_expected_prev[0] !== 1'bx ) && ( states_prev[0] !== states_expected_prev[0] )
		&& ((states_expected_prev[0] !== last_states_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_states_exp[0] = states_expected_prev[0];
	end
	if (
		( states_expected_prev[1] !== 1'bx ) && ( states_prev[1] !== states_expected_prev[1] )
		&& ((states_expected_prev[1] !== last_states_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_states_exp[1] = states_expected_prev[1];
	end
	if (
		( states_expected_prev[2] !== 1'bx ) && ( states_prev[2] !== states_expected_prev[2] )
		&& ((states_expected_prev[2] !== last_states_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_states_exp[2] = states_expected_prev[2];
	end
	if (
		( states_expected_prev[3] !== 1'bx ) && ( states_prev[3] !== states_expected_prev[3] )
		&& ((states_expected_prev[3] !== last_states_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_states_exp[3] = states_expected_prev[3];
	end
	if (
		( student_id_expected_prev[0] !== 1'bx ) && ( student_id_prev[0] !== student_id_expected_prev[0] )
		&& ((student_id_expected_prev[0] !== last_student_id_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_student_id_exp[0] = student_id_expected_prev[0];
	end
	if (
		( student_id_expected_prev[1] !== 1'bx ) && ( student_id_prev[1] !== student_id_expected_prev[1] )
		&& ((student_id_expected_prev[1] !== last_student_id_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_student_id_exp[1] = student_id_expected_prev[1];
	end
	if (
		( student_id_expected_prev[2] !== 1'bx ) && ( student_id_prev[2] !== student_id_expected_prev[2] )
		&& ((student_id_expected_prev[2] !== last_student_id_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_student_id_exp[2] = student_id_expected_prev[2];
	end
	if (
		( student_id_expected_prev[3] !== 1'bx ) && ( student_id_prev[3] !== student_id_expected_prev[3] )
		&& ((student_id_expected_prev[3] !== last_student_id_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_student_id_exp[3] = student_id_expected_prev[3];
	end
	if (
		( x_expected_prev[0] !== 1'bx ) && ( x_prev[0] !== x_expected_prev[0] )
		&& ((x_expected_prev[0] !== last_x_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x_exp[0] = x_expected_prev[0];
	end
	if (
		( x_expected_prev[1] !== 1'bx ) && ( x_prev[1] !== x_expected_prev[1] )
		&& ((x_expected_prev[1] !== last_x_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x_exp[1] = x_expected_prev[1];
	end
	if (
		( x_expected_prev[2] !== 1'bx ) && ( x_prev[2] !== x_expected_prev[2] )
		&& ((x_expected_prev[2] !== last_x_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x_exp[2] = x_expected_prev[2];
	end
	if (
		( x_expected_prev[3] !== 1'bx ) && ( x_prev[3] !== x_expected_prev[3] )
		&& ((x_expected_prev[3] !== last_x_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x_exp[3] = x_expected_prev[3];
	end
	if (
		( x_expected_prev[4] !== 1'bx ) && ( x_prev[4] !== x_expected_prev[4] )
		&& ((x_expected_prev[4] !== last_x_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x_exp[4] = x_expected_prev[4];
	end
	if (
		( x_expected_prev[5] !== 1'bx ) && ( x_prev[5] !== x_expected_prev[5] )
		&& ((x_expected_prev[5] !== last_x_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x_exp[5] = x_expected_prev[5];
	end
	if (
		( x_expected_prev[6] !== 1'bx ) && ( x_prev[6] !== x_expected_prev[6] )
		&& ((x_expected_prev[6] !== last_x_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x_exp[6] = x_expected_prev[6];
	end
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end
	if (
		( y_expected_prev[4] !== 1'bx ) && ( y_prev[4] !== y_expected_prev[4] )
		&& ((y_expected_prev[4] !== last_y_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y_exp[4] = y_expected_prev[4];
	end
	if (
		( y_expected_prev[5] !== 1'bx ) && ( y_prev[5] !== y_expected_prev[5] )
		&& ((y_expected_prev[5] !== last_y_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y_exp[5] = y_expected_prev[5];
	end
	if (
		( y_expected_prev[6] !== 1'bx ) && ( y_prev[6] !== y_expected_prev[6] )
		&& ((y_expected_prev[6] !== last_y_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y_exp[6] = y_expected_prev[6];
	end
	if (
		( z_expected_prev[0] !== 1'bx ) && ( z_prev[0] !== z_expected_prev[0] )
		&& ((z_expected_prev[0] !== last_z_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_z_exp[0] = z_expected_prev[0];
	end
	if (
		( z_expected_prev[1] !== 1'bx ) && ( z_prev[1] !== z_expected_prev[1] )
		&& ((z_expected_prev[1] !== last_z_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_z_exp[1] = z_expected_prev[1];
	end
	if (
		( z_expected_prev[2] !== 1'bx ) && ( z_prev[2] !== z_expected_prev[2] )
		&& ((z_expected_prev[2] !== last_z_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_z_exp[2] = z_expected_prev[2];
	end
	if (
		( z_expected_prev[3] !== 1'bx ) && ( z_prev[3] !== z_expected_prev[3] )
		&& ((z_expected_prev[3] !== last_z_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_z_exp[3] = z_expected_prev[3];
	end
	if (
		( z_expected_prev[4] !== 1'bx ) && ( z_prev[4] !== z_expected_prev[4] )
		&& ((z_expected_prev[4] !== last_z_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_z_exp[4] = z_expected_prev[4];
	end
	if (
		( z_expected_prev[5] !== 1'bx ) && ( z_prev[5] !== z_expected_prev[5] )
		&& ((z_expected_prev[5] !== last_z_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_z_exp[5] = z_expected_prev[5];
	end
	if (
		( z_expected_prev[6] !== 1'bx ) && ( z_prev[6] !== z_expected_prev[6] )
		&& ((z_expected_prev[6] !== last_z_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_z_exp[6] = z_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab6block_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg Enable;
reg resetA;
reg resetB;
reg w;
// wires                                               
wire [15:0] Decoder;
wire [3:0] R1;
wire [3:0] R2;
wire [3:0] states;
wire [3:0] student_id;
wire [7:0] t;
wire [7:0] u;
wire [0:6] x;
wire [0:6] y;
wire [0:6] z;

wire sampler;                             

// assign statements (if any)                          
Lab6block i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clock(Clock),
	.Decoder(Decoder),
	.Enable(Enable),
	.R1(R1),
	.R2(R2),
	.resetA(resetA),
	.resetB(resetB),
	.states(states),
	.student_id(student_id),
	.t(t),
	.u(u),
	.w(w),
	.x(x),
	.y(y),
	.z(z)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// Enable
initial
begin
	Enable = 1'b1;
end 

// w
initial
begin
	w = 1'b1;
end 

// resetA
initial
begin
	resetA = 1'b1;
end 

// resetB
initial
begin
	resetB = 1'b1;
end 

Lab6block_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.Enable(Enable),
	.resetA(resetA),
	.resetB(resetB),
	.w(w),
	.sampler_tx(sampler)
);

Lab6block_vlg_check_tst tb_out(
	.Decoder(Decoder),
	.R1(R1),
	.R2(R2),
	.states(states),
	.student_id(student_id),
	.t(t),
	.u(u),
	.x(x),
	.y(y),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

