library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
entity ALU is
port (Clock			: in std_logic; -- input clock signal
		A, B			: in unsigned(7 downto 0);
		student_id	: in unsigned (3 downto 0); -- 4 bit student id from FSM
		OP				: in unsigned (15 downto 0);
		Neg			: out unsigned (3 downto 0); -- is the result negative?
		R1				: out unsigned (3 downto 0); -- lower 4 bits of 8 bit Result Output
      R2				: out unsigned (3 downto 0)); -- higher 4 bits of 8 bit Result Output
		end ALU;
architecture calculation of ALU is -- temporary signal declaration
signal Reg1, Reg2,	Result : unsigned (7 downto 0):= (others =>'0');
signal Reg4 : unsigned (0 to 7);
	begin
		Reg1 <= A; -- temporarily store A in Reg1 local variable
		Reg2 <= B; -- temporarily store B in Reg2 local variable
		process (clk, OP)
		begin
		if (clk'EVENT AND clk = '1') THEN
		case OP is 
		WHEN "0000000000000001" => 
			Result <= Reg1 + Reg2;
		WHEN "0000000000000010" =>
			Result <= Reg1 - Reg2;
			Neg <= (NOT Result) + '1';
		WHEN "0000000000000100" =>
			Result <= (NOT Reg1);				-- boolean NOT
		WHEN "0000000000001000" =>
			Result <= (NOT (Reg1 AND Reg2)); -- boolean NAND
		WHEN "0000000000010000" =>
			Result <= (NOT (Reg1 OR Reg2));	-- boolean NOR
		WHEN "0000000000100000" =>
			Result <= (Reg1 AND Reg2);			-- boolean AND
		WHEN "0000000001000000" =>
			Result <= (Reg1 OR Reg2);			-- boolean OR
		WHEN "0000000010000000" =>
			Result <= (Reg1 XOR Reg2);			-- boolean XOR
		WHEN "0000000100000000" =>
			Result <= (Reg1 XNOR Reg2);		-- boolean XNOR
		WHEN OTHERS
			Result <= "--------";
	end case;
end process;
R1 <= Result(3 downto 0);	-- Since the output seven segments can
R2 <= Result(7 downto 4);	-- only 4 bits, splits the 8 bits int0 two 4 - bits
		
	
		